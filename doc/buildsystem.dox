/*
 * Copyright 2011-2012 Tanjeff-Nicolai Moos <tanjeff@cccmz.de>
 *
 * This file is part of the agentXcpp library.
 *
 * AgentXcpp is free software: you can redistribute it and/or modify
 * it under the terms of the AgentXcpp library license, version 1, which 
 * consists of the GNU General Public License and some additional 
 * permissions.
 *
 * AgentXcpp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * See the AgentXcpp library license in the LICENSE file of this package 
 * for more details.
 */

/*!

\internal

\page buildsystem The Build System

AgentXcpp uses <a href="http://www.scons.org">SCons</a> as an easy-to-use build 
system. Therefore, building agentXcpp is a one-step operation: simply invoke \c 
scons at the command line, and the library will be built. In addition, SCons 
provides operations to clean up the build directory, make parallel builds and 
others.

Installing the components of the agentXcpp library (header files, API 
documentation and the library itself) is as easy as invoking <tt>scons 
install</tt>. It is expected that agentXcpp is built by a package maintainer, 
not by an end user.  Therefore, SCons is set up to install the library into the 
<tt>./install-root/</tt> directory by default, from where a package maintainer 
may pick it up for his package (e.g. a Redhat RPM package). The directories in 
which the files are installed are configurable. Thus, it is also possible to 
install agentXcpp right into a system, like <tt>make intall</tt> would do..

This section explains how AgentXcpp can be built and how agentXccp uses SCons 
internally.

\section howtobuild How to build AgentXcpp

\subsection prerequisites Prerequisites

The following software is needed to build agentXcpp. Simply use the versions 
which are easily available for your system.
- Standard build environment (compiler, linker, etc.)
- The QT4 library (devel package, e.g. libqt4-dev on linux systems)
- Doxygen, to build the documentation
- Graphviz, which is used by doxygen to generate class diagrams and the like
- SCons, to control the build process



\subsection building Building

To build agentXcpp, simply type

\verbatim
scons
\endverbatim

You may add the \c -j switch to parallelize the build (e.g.  <tt>-j2</tt>).  
The doxygen documentation will also be build and can then be found in 
<tt>doc/api/</tt> and <tt>doc/internals/</tt>.

\subsection installing Installing

To install the library to the default location (which is 
<tt>'install-root/'</tt> in the top-level directory), type

\verbatim
scons install
\endverbatim

The install directories can be specified by various command-line switches.  
Example:

\verbatim
scons --prefix=/usr/local install
\endverbatim

This will install all files in subdirectories of <tt>/usr/local/</tt>. Another 
example:

\verbatim
scons --libdir=/lib --docdir=/usr/share/doc/ --includedir=/usr/include install
\endverbatim

This installs the shared object into <tt>/lib</tt>, the doxygen documentation 
into <tt>/usr/share/doc/</tt> and the header files into <tt>/usr/include/</tt>.  
An added \c -<tt>-prefix</tt> option would do nothing in this example, because 
the prefix is only used to calculate libdir, includedir and docdir. The 
following example will do the same as the previous one:

\verbatim
scons --prefix=/usr/ --libdir=/lib install
\endverbatim

The build system will choose PREFIX/include (which is <tt>/usr/include</tt> in 
the example) as includedir and PREFIX/share/doc (which is 
<tt>/usr/share/doc</tt> in the example) as docdir. The default directories can 
be shown with <tt>scons -h</tt>.

\subsection cleaning Cleaning

To clean the project directory, type:

\verbatim
scons -c
\endverbatim

This removes only files which were produced by calling <tt>scons</tt>.  Files 
installed with <tt>scons install</tt> are left alone. To remove these, too, 
type:

\verbatim
scons -c install
\endverbatim

Note, however, that this only removes files in <tt>./install-root</tt>, the 
default installation directory. If files were installed to other locations, 
these can be removed by adding the locations again, e.g.:

\verbatim
scons -c --prefix=/usr/local install
\endverbatim

\section howitworks How Scons works in agentXcpp

AgentXcpp includes two SCons tools located in <tt>site_scons/site_tools/</tt>: 
qt4 and doxygen. Both tools were not created by the agentXcpp developer and 
both have other license terms. However, when distributing agentXcpp under its 
license terms, these tools can safely distributed along, as long as they are 
changed under their own terms.

The root directory contains a \c SConstruct file, and each subdirectory has a 
\c SConscript file to control the build process inside that directory.


\subsection sconstruct The top-level SConstruct

The  top-level \c SConstruct file defines a number of command-line options 
using the <tt>AddOption()</tt> function, providing a description (for the 
<tt>-h</tt> switch) and a default value. These options become available in 
addition to the standard SCons options (like \c -c). Then, the given options 
are read from the command line with <tt>GetOption()</tt> and the proper actions 
are taken. 

The following options are currently provided:
- \c -<tt>-prefix=PREFIX</tt>
- \c -<tt>-libdir=LIBDIR</tt>
- \c -<tt>-includedir=INCLUDEDIR</tt>
- \c -<tt>-docdir=DOCDIR</tt>

which define the following SCons environment variables:
- <tt>libdir</tt>: where the library gets installed
- <tt>includedir</tt>: where the headers get installed
- <tt>docdir</tt>: where the API documentation gets installed
- <tt>prefix</tt>: used to build up default values for the above options

When a relative path is given for any of these options, it is converted to an 
absolute path, because SCons functions are always invoked from the top-level 
directory, while the \c scons invocation may happen in a subsidiary 
directory.

After processing the command line, the SConscript invokes <tt>getVersion()</tt> 
from the <tt>getversion.py</tt> script to determine the version from which 
agentXcpp is built.  The version string is added as environment variable 
<tt>'revision'</tt>.

Next, the SConscript checks for some tools and provides useful error messages 
if something is missing.

Finally, the subsidiary SConscript's are invoked, exporting the environment.

\subsection src_sconscript src/SConscript

The \c SConscript in src/ builds the library and provides the install target 
for it. Further, the library is defined as one of the default targets.

If g++ is detected, the SConscript also adds some compiler flags to get more 
warnings.


\subsection doc_sconscript doc/SConscript

The \c SConscript in doc/ builds the doxygen documentations (API and 
internals). It uses the SCons doxygen tool to do so. This tool is included in 
the agentXcpp source repository and was extended to support the \c 
DOXYPROJECTNUMBER environment variable, which appends the \c PROJECT_NUMBER 
option to the doxyfile before running doxygen. This way, the version 
information can be built into the documentation.

For API documentation, the SConscript defines an install target. The internals 
documentation is not intended to be installed in a system, because the audience 
are developers who like to work on the agentXcpp source code.

Further, clean targets are defined, and a default target is specified so that 
the documentations are built by default.

*/

/*
 * Copyright 2011-2016 Tanjeff-Nicolai Moos <tanjeff@cccmz.de>
 *
 * This file is part of the agentXcpp library.
 *
 * AgentXcpp is free software: you can redistribute it and/or modify
 * it under the terms of the AgentXcpp library license, version 1, which 
 * consists of the GNU General Public License and some additional 
 * permissions.
 *
 * AgentXcpp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * See the AgentXcpp library license in the LICENSE file of this package 
 * for more details.
 */

/*!

\internal


\page buildsystem The Build System

AgentXcpp uses <a href="http://www.scons.org">SCons</a> as an easy-to-use build 
system. Therefore, building agentXcpp is a one-step operation: simply invoke \c 
scons at the command line, and the library will be built. In addition, SCons 
provides operations to clean up the build directory, make parallel builds and 
more.

\section howtobuild How to build AgentXcpp

A short introduction of the prerequisites and the build process of agentXcpp is 
given in \ref installation. If you want to hack on agentXcpp itself, some more 
commands become handy. You can easily (re)build agentXcpp with

\verbatim
# While in top-level directory: Build agentXcpp
scons
\endverbatim

SCons keeps track of all dependencies, for example included headers, and 
rebuilds only the parts that it really need to. It even might skip the linker 
step if compilation generated unchanged object files. To build only part of the 
project, use can use

\verbatim
# While in src/: Build only the library
scons -u
# While in doc/: Build only the documentation
scons -u
\endverbatim

The \c -u parameter tells SCons to walk the directory tree up to find the 
SConsctruct file. Another useful command is

\verbatim
# Remove all files created by SCons
scons -c
\endverbatim

This removes the files which were produced by calling <tt>scons</tt>.  Files 
installed with <tt>scons install</tt> are left alone.  Note that this cleaning 
command is rarely needed. Unlike autotools or the like, SCons doesn't get stuck 
if dependencies change.


\section howitworks How Scons works in agentXcpp

AgentXcpp includes two SCons tools located in <tt>site_scons/site_tools/</tt>: 
qt4 and doxygen. Both tools were not created by the agentXcpp developer and 
both have other license terms. However, when distributing agentXcpp under its 
license terms, these tools can safely distributed along, as long as they are 
changed under their own terms.

The root directory contains a \c SConstruct file, and each subdirectory has a 
\c SConscript file to control the build process inside that directory.


\subsection sconstruct The top-level SConstruct

The  top-level \c SConstruct file defines a number of command-line options 
using the <tt>AddOption()</tt> function, providing a description (for the 
<tt>-h</tt> switch) and a default value. These options become available in 
addition to the standard SCons options and can be seen with <tt> scons -h</tt>.  
Then, the given options are read from the command line with 
<tt>GetOption()</tt> and the proper actions are taken. 

The following options are currently provided:
- \c -<tt>-prefix=PREFIX</tt>
- \c -<tt>-libdir=LIBDIR</tt>
- \c -<tt>-includedir=INCLUDEDIR</tt>
- \c -<tt>-docdir=DOCDIR</tt>

which define the following SCons environment variables:
- <tt>libdir</tt>: where the library gets installed
- <tt>includedir</tt>: where the headers get installed
- <tt>docdir</tt>: where the API documentation gets installed
- <tt>prefix</tt>: used to build up default values for the above options

When a relative path is given for any of these options, it is converted to an 
absolute path, because SCons functions are always invoked from the top-level 
directory, while the \c scons invocation may happen in a subdirectory.

After processing the command line, the SConscript invokes <tt>getVersion()</tt> 
from the <tt>getversion.py</tt> script to determine the version from which 
agentXcpp is built.  The version string is added as environment variable 
<tt>'revision'</tt>.

Next, the SConscript checks for some tools and provides useful error messages 
if something is missing.

Finally, the subsidiary SConscript's are invoked while exporting the 
environment to them.

\subsection src_sconscript src/SConscript

The \c SConscript in src/ builds the library and provides the install target 
for it. Further, the library is defined as one of the default targets.

If g++ is detected, the SConscript also adds some compiler flags to produce 
more warnings.


\subsection doc_sconscript doc/SConscript

The \c SConscript in doc/ builds the doxygen documentations (API and 
internals). It uses the SCons doxygen tool to do so. This tool is included in 
the agentXcpp source repository and was extended to support the \c 
DOXYPROJECTNUMBER environment variable, which appends the \c PROJECT_NUMBER 
option to the doxyfile before running doxygen. This way, the version 
information can be built into the documentation.

For API documentation, the SConscript defines an install target. The internals 
documentation is not intended to be installed in a system, because the audience 
are developers who like to work on the agentXcpp source code.

Further, clean targets are defined, and default targets are specified so that 
the documentations are built by default.

*/

/*
 * Copyright 2011-2012 Tanjeff-Nicolai Moos <tanjeff@cccmz.de>
 *
 * This file is part of the agentXcpp library.
 *
 * AgentXcpp is free software: you can redistribute it and/or modify
 * it under the terms of the AgentXcpp library license, version 1, which 
 * consists of the GNU General Public License and some additional 
 * permissions.
 *
 * AgentXcpp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * See the AgentXcpp library license in the LICENSE file of this package 
 * for more details.
 */

/*!

\internal

\page buildsystem The Build System

AgentXcpp uses <a href="http://www.scons.org">SCons</a> as an easy-to-use build 
system. Building agentXcpp is a one-step operation: simply invoke \c scons at 
the command line, and the library will be built. In addition, SCons provides 
operations to clean up the build directory, make parallel builds and others.  
Read the SCons documentation to learn more.

Installing the components of the agentXcpp library (header files, API 
documentation and the library itself) is as easy as invoking <tt>scons 
install</tt>. It is expected that agentXcpp is built by a package maintainer, 
not by an end user.  Therefore, SCons is set up to install the library into the 
<tt>./install-root/</tt> directory by default, from where a package maintainer 
may pick it up for his package (e.g. a Redhat RPM package). The directories in 
which the files are installed are configurable for flexibility. Therefore, it 
is also possible to install agentXcpp right into a system.

This section explains how AgentXcpp is built and how SCons is used by agentXccp 
internally.

\section howtobuild How to build AgentXcpp

\subsection prerequisites Prerequisites

The following software is needed to build agentXcpp, simply use the versions 
which are easily available for your system:
- Standard build environment (compiler, linker, etc.)
- Doxygen, to build the documentation
- SCons, to control the build process
- The boost libraries



\subsection building Building

To build agentXcpp, simply type

<tt>scons</tt>

You may add the \c -j switch to parallelize the build (e.g.  <tt>-j2</tt>).  
The doxygen documentation will also be build and can then be found in 
<tt>doc/api/</tt> and <tt>doc/internals/</tt>.

\subsection installing Installing

To install the library to the default location (which is 
<tt>'install-root/'</tt> in the top-level directory), type

<tt>scons install</tt>

The install directories can be specified by various command-line switches.  
Example:

<tt>scons --prefix=/usr/local install</tt>

This will install all files in subdirectories of <tt>/usr/local/</tt>. Another 
example:

<tt>scons --libdir=/lib --docdir=/usr/share/doc/ --includedir=/usr/include 
install</tt>

This installs the shared object into <tt>/lib</tt>, the doxygen documentation 
into <tt>/usr/share/doc/</tt> and the header files into <tt>/usr/include/</tt>.  
An added <tt>--prefix</tt> option would do nothing in this example, because the 
prefix is only used to calculate libdir, includedir and docdir. The following 
example will do the same as the previous one:

<tt>scons --prefix=/usr/ --libdir=/lib install</tt>

The build system will choose PREFIX/include (which is <tt>/usr/include</tt> in 
the example) as includedir and PREFIX/share/doc (which is 
<tt>/usr/share/doc</tt> in the example) as docdir. The default directories can 
be shown with <tt>scons -h</tt>.

\subsection unit_tests Building the Unit Tests

The unit tests can be build with

<tt>scons testsuite</tt>

\subsection cleaning Cleaning

To clean the project directory, type:

<tt>scons -c</tt>

This doesn't clean any files installed with <tt>scons install</tt>.
  


\section howitworks How Scons works in agentXcpp

SCons is controlled via the \c SConstruct and \c SConscript files (the 
"Makefiles" of SCons).  These files are in fact python scripts which call 
certain SCons functions.  These SCons functions then build agentXcpp. The root 
directory contains an \c SConstruct file, and each subdirectory has a \c 
SConscript file to control the build process inside that directory.


\subsection sconstruct The top-level SConstruct

The top-level \c SConstruct file defines the install prefix and the following 
directories:
- libdir: where the library is installed
- includedir: where the headers are installed
- docdir: where the API documentation is installed

For each of them, a command-line option is added using the <tt>AddOption()</tt> 
function, providing a description (for the <tt>-h</tt> switch) and a default 
value.  Then, the given options are read from the command line with 
<tt>GetOption()</tt> and added to the build environment. When a relative path 
is given, it is converted to an absolute path, because SCons functions are 
always invoked from the top-level directory, while the \c scons invocation may 
happen in a subsidiary directory.  The following command-line options are 
provided:
- <tt>--prefix=PREFIX</tt>
- <tt>--libdir=LIBDIR</tt>
- <tt>--includedir=INCLUDEDIR</tt>
- <tt>--docdir=DOCDIR</tt>

Next, the git command <tt>describe</tt> is used to determine the revision from 
which agentXcpp is built. The revision is added to the build environment.

Finally, the subsidiary SConscript's are invoked, exporting the environment.

\subsection src_sconscript src/SConscript

The \c SConscript in src/ builds the library and provides the install target 
for it. Further, the library is defined as one of the default targets.

If g++ is detected, the SConscript also adds some compiler flags to get more 
warnings.


\subsection doc_sconscript doc/SConscript

The \c SConscript in doc/ builds the doxygen documentations (API and 
internals). This \c SConscript is hackish, as scons doesn't know about doxygen, 
and there is currently no working Doxygen builder available for it.

First, the SConscript defines how to build the API documentation, using the 
SCons <tt>Command()</tt> function. As target, the generated 
'api/html/index.html' file is used (although many other files are generated 
alongside), and 'api.doxyfile', the doxygen configuration file for the API 
docs, is defined as primary source for the build. The command for building 
begins with '<tt>cd doc/</tt>', because the build is always started from the 
top-level directory, but Doxygen must be invoked in the doc directory in order 
to find its files. Also, this command includes shell code to feed the revision 
from the environment into doxygen's <tt>PROJECT_NUMBER</tt> variable to make it 
visible in the generated documentation.

Second, the dependencies are defined. If any dependency changes, the 
documentation must be rebuild. To keep things easy, all <tt>*.cpp</tt> and 
<tt>*.hpp</tt> files in <tt>src/</tt> as well as all <tt>*.dox</tt> files are 
defined to be dependencies.

For completeness, SCons is told how to remove the built files using the 
<tt>Clean()</tt> function to provide proper <tt>scons -c</tt> operation and an 
install target for the API documentation is defined using <tt>Install()</tt>.

These steps are then repeated for the internal documentation, except that no 
install target is defined for it. Finally, the API and internals documentations 
are defined as default targets.

A more appropriate implementation would scan the Doxygen configuration files 
for the input and output file patterns and define more accurate SCons 
dependencies.  However, the current implementation will work until a good 
Doxygen builder becomes available.


\subsection unit_tests_sconscript unit_tests/SConscript

The \c SConscript in unit_tests/ builds the unit tests for agentXcpp. When 
using the g++ compiler, the <tt>-rpath ../src/</tt> parameter is added so that 
the unit tests can find the agentXcpp shared library although it is not 
installed in a well-known place (like <tt>/usr/lib</tt>).

An install target is not provided, as unit tests are of course not installed on 
the target system. Also, the unit tests are not defined as a default target.


*/

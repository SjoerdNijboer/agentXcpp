/*
 * Copyright 2011-2012 Tanjeff-Nicolai Moos <tanjeff@cccmz.de>
 *
 * This file is part of the agentXcpp library.
 *
 * AgentXcpp is free software: you can redistribute it and/or modify
 * it under the terms of the AgentXcpp library license, version 1, which 
 * consists of the GNU General Public License and some additional 
 * permissions.
 *
 * AgentXcpp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * See the AgentXcpp library license in the LICENSE file of this package 
 * for more details.
 */

/*! 


\page how_to_send_notifications How to send notifications and traps

\note This is a follow-up tutorial to \ref how_to_add_rw_support.

This HOWTO explains how to send notifications (SNMP v2, v2c and v3) and traps 
(SNMP v1). Luckily, from a subagent's point of view, there is nearly no 
difference between traps and notifications. In the following text, the term 
"notification" is used for notifications \e and traps.

When a subagent detects some interesting condition, it may send a notification 
to the master agent. The master agent will then forward it to some SNMP 
managers, depending on its configuration. The destination of the SNMP 
notification (or trap) is determined solely by the master agent.

We start with the subagent developed in \ref how_to_add_rw_support, which 
provides the SNMP variable simpleCounter. This counter is incremented each time 
it is read. Next we will enhance our implementation so that it sends a 
notification every second.

First of all, let's augment the SIMPLE-MIB:

\verbatim
SIMPLE-MIB DEFINITIONS ::= BEGIN

IMPORTS
    OBJECT-TYPE FROM SNMPv2-SMI
    enterprises FROM SNMPv2-SMI
    NOTIFICATION-TYPE FROM SNMPv2-SMI;

simpleCounter OBJECT-TYPE
    SYNTAX INTEGER
    ACCESS read-write
    STATUS current
    DESCRIPTION "A simple counter which is incremented each time
                 it is queried. Starts with 0."
    ::={ enterprises 42 1 }

simpleCounterStatus NOTIFICATION-TYPE
    OBJECTS { simpleCounter }
    STATUS current
    DESCRIPTION "A notification sent each 5 seconds."
    ::={ enterprises 42 0 1 }

END
\endverbatim

As can be seen, we added the simpleCounterChange notification, which will 
include the simpleCounter value when sent. Note that the next-to-last 
subidentifier for notifications must be 0 according to RFC 1902, 8.5. "Mapping 
of the NOTIFICATION-TYPE value".


\section implementing_notification The Implementation

So, how do we implement a notification? Normally, a subagent is just sitting 
there, waiting for SNMP requests and handling them. Notifications typically 
arise outside of this mechanism. We simulate that by using a timer which fires 
every second and sends a notification. We will use a QTimer which can use the 
event loop provided by QT. For this we need a class with a QT slot to which the 
QTimer can be connected. We name that class <tt>NotificationSender</tt> and put 
it into its own file: <tt>NotificationSender.hpp</tt> (for simplicity we 
implement the whole class in the header, so we won't need an implementation 
file). Here ist the <tt>NotificationSender.hpp</tt> file:

\code
#ifndef _NOTIFICATIONSENDER_H_
#define _NOTIFICATIONSENDER_H_

#include <iostream>
#include <QObject>
#include <agentxcpp/OidValue.hpp>
#include <agentxcpp/MasterProxy.hpp>
#include "SimpleCounter.hpp"

using namespace agentxcpp;

class NotificationSender : public QObject
{
    Q_OBJECT

    private:
        MasterProxy* master;
        OidValue simpleCounter_oid;
        shared_ptr<SimpleCounter> counter;

    public:
        NotificationSender(MasterProxy* _master,
                           OidValue _oid,
                           shared_ptr<SimpleCounter> _counter)
        : master(_master), simpleCounter_oid(_oid), counter(_counter)
        {
        }

    public slots:
        void sendNotification()
        {
            std::cout << "notification!" << std::endl;

            std::vector<varbind> objects;
            shared_ptr<AbstractValue> counter_value(new IntegerValue(counter->value()));
            objects.push_back(varbind(simpleCounter_oid, counter_value));

            QMetaObject::invokeMethod(master, "send_notification",
                                      Q_ARG(const OidValue&, simpleCounter_oid),
                                      Q_ARG(const std::vector<varbind>&, objects)
                                     );
        }
};

#endif // _NOTIFICATIONSENDER_H_
\endcode

\todo Which OID must be given to send_notification()?

The NotificationSender inherits QObject and uses the Q_OBJECT macro, which is 
both needed to make the class suitable for QT's signal/slot mechanism. The 
constructor takes a pointer to the MasterProxy object (needed to send 
notifications), the simpleCounter's oid (will be included in the notifications) 
and a pointer to the counter (will be queried to include the value in the 
notifications).  The sendNotification() slot will be connected to the QTimer 
object and sends a notification each time it is invoked. Also, it performs an 
output to indicate that a notification is sent, which we will possibly miss as 
long as the master agent is not yet configured properly.

We use QMetaObject::invokeMethod() here to invoke the 
MasterProxy::send_notification() slot. This would even work if the 
NotificationSender were running in a separate thread. In the example, were the 
NotificationSender and the MasterProxy run in the same thread, a simple call 
would also work:

\code
// Could be used instead of QMetaObject::invokeMethod(),
// because NotificationSender and MasterProxy run in
// the same thread:
master->send_notification(simpleCounter_oid, objects);
\endcode

Next, we augment the code within the <tt>main()</tt> function. But first, we 
need additional includes in <tt>simpleagent.cpp</tt>:

\code
#include <QTimer>
#include "NotificationSender.hpp"
\endcode

And this is the complete <tt>main()</tt> function:

\code
int main(int argc, char** argv)
{
    QCoreApplication app(argc, argv);
    MasterProxy master;

    OidValue simpleagent_oid = OidValue(enterprises_oid, "42.1");
    master.register_subtree(simpleagent_oid);

    boost::shared_ptr<SimpleCounter> counter(new SimpleCounter);
    OidValue simpleCounter_oid(simpleagent_oid, "0");
    master.add_variable(simpleCounter_oid, counter);

    // New code: ----------------------------------------
    NotificationSender sender(&master, simpleCounter_oid, counter);

    QTimer timer;
    QObject::connect(&timer, SIGNAL(timeout()),
                     &sender, SLOT(sendNotification()));
    timer.setInterval(1000); // 1000 milliseconds
    timer.start();
    // --------------------------------------------------

    app.exec();
}
\endcode

First, we create a NotificationSender object.  Then, we create a QTimer object, 
connect its <tt>timeout()</tt> signal to the NotificationSender's 
<tt>sendNotification()</tt> slot, configure its interval to 1 second (the timer 
is repetitive by default), and start it.


\section compiling_notification Compiling the Subagent

Compiling the subagent becomes a bit more complicated, because we need to 
invoke QT's meta-object compiler (moc) for the NotificationSender class, which 
we do first:

\code
moc-qt4 `pkg-config --cflags QtCore QtNetwork` \
        -o moc_NotificationSender.cc \
        NotificationSender.hpp
\endcode

This compiles the header <tt>NotificationSender.hpp</tt> into the file 
<tt>moc_NotificationSender.cc</tt>. Next, we compile this file into an object 
file:

\code
g++ -c moc_NotificationSender.cc `pkg-config --cflags QtCore QtNetwork`
\endcode

Finally we compile the <tt>simpleagent.cpp</tt> and link it against the 
generated object file:

\code
g++ simpleagent.cpp -o simpleagent moc_NotificationSender.o \
        `pkg-config --cflags --libs QtNetwork QtCore` \
        -lboost_system -lpthread -lagentxcpp
\endcode

Now, the executable is ready to run.


\section running_notification Running the Subagent

\subsection master_agent The master agent

The subagent is run as described in \ref how_to_write_a_subagent, but to make 
notifications work, we need additional configuration for the master agent.  
For the NET-SNMP master agent, add the following line to its configuration 
file <tt>/etc/snmp/snmpd.conf</tt>:

\verbatim
informsink udp:127.0.0.1 rw
\endverbatim

This line means that notifications are sent to the address 127.0.0.1, using the 
default port (which is 162) and the community string "rw" (which we also used
in \ref how_to_write_a_subagent). Next, we (re)start the master agent using its 
init scripts:

\verbatim
/etc/init.d/snmpd stop
/etc/init.d/snmpd start
\endverbatim

Note that the path depends on your system. For example in ArchLinux, it is 
/etc/rc.d/snmpd.


\subsection snmptrapd The snmptrapd program

To receive notifications, we use the snmptrapd program from the NET-SNMP 
package. First, we have to configure it. Make sure that the following line is 
contained in <tt>/etc/snmp/snmptrapd.conf</tt>:

\verbatim
authCommunity log rw
\endverbatim

That line enables logging for notifications with the community string "rw". Now 
start the program <b>as root</b>. The program must be run as root, because it 
needs to listen on the privileged port 162.

\verbatim
# As root:
snmptrapd -f -Le
\endverbatim

The <tt>-f</tt> parameter forces the program to stay in the foreground, so we 
can see its output. The <tt>-Le</tt> parameter redirects the logging messages 
to stderr (i.e. to the console window).


\subsection starting_subagent Starting the Subagent

The subagent is started as last times:

\verbatim
./simpleagent
\endverbatim

If all went right, we can see notifications arriving in the snmptrapd console, 
with each notification reporting the current counter value. Try some SNMP get 
and get requests:

\verbatim
snmpget -v1 -c rw localhost SIMPLE-MIB::simpleCounter.0
\endverbatim

\verbatim
snmpset -v1 -c rw localhost SIMPLE-MIB::simpleCounter.0 i 42
\endverbatim

This increases or sets the counter value, and the new values are reported 
within the notifications.

*/

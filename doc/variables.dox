/*
 * Copyright 2011-2012 Tanjeff-Nicolai Moos <tanjeff@cccmz.de>
 *
 * This file is part of the agentXcpp library.
 *
 * AgentXcpp is free software: you can redistribute it and/or modify
 * it under the terms of the AgentXcpp library license, version 1, which 
 * consists of the GNU General Public License and some additional 
 * permissions.
 *
 * AgentXcpp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * See the AgentXcpp library license in the LICENSE file of this package 
 * for more details.
 */

/*! 



\page variables The Variable Objects


\section variables_introduction Introduction

SNMP and AgentX are all about variables, and how to obtain or alter their 
values. In agentXcpp, variables are represented by objects which implement the 
\agentxcpp{AbstractVariable} interface. The library provides some classes such 
as \agentxcpp{IntegerVariable} and \agentxcpp{OctetStringVariable}, all 
implementing \agentxcpp{AbstractVariable}. These classes can directly be 
instantiated to serve as read-only variables (they do not support SNMP Set 
requests), and their value can be obtained with value() and altered with 
setValue().

However, it is normally more useful to derive from these classes and reimplement 
perform_get(), so that the value can be obtained in the moment a Get request 
occurs.  Also, the <tt>perform_testset()</tt>, <tt>perform_commitset()</tt>, 
<tt>perform_undoset()</tt> and <tt>perform_cleanupset()</tt> methods can be 
reimplemented to add write support.

\section variables_get How SNMP Get requests are served

Each variable has an internal member to store its value, e.g.  
\agentxcpp{IntegerVariable::v}. This value can be read with <tt>value()</tt> and 
set with <tt>setValue()</tt>. The <tt>perform_get()</tt> method is called by the 
library when an SNMP Get is requested for the variable.  This method should then 
update the value to reflect the current state. The default 
<tt>perform_get()</tt> implementation does nothing and thus allows to read the 
value as set by the last call to setValue().  This makes it possible to use the 
Variable class without inheriting.

\note It is currently not possible to inhibit Get requests, i.e. it is not 
      possible to implement write-only variables.


\internal

\subsection variables_get_internal How Get requests are handled internally

When the \agentxcpp{MasterProxy} object receives a Get (or GetNext) request, it 
looks up the variable registered with the requested OID. This works even for 
variables which are part of a table, because the \agentxcpp{Table} class 
registers its variables like any other variable. Then the MasterProxy invokes 
the variable's \agentxcpp{AbstractVariable::handle_get()} method to update the 
value of the variable. After that, it adds the variable to a \agentxcpp{Varbind} 
object which is then embedded into the response and sent back to the master 
agent (possibly with further varbinds). 

The variable's \agentxcpp{AbstractVariable::handle_get()} method is implemented 
in the subclasses. It first calls <tt>perform_get()</tt> to update the 
internally stored value.  The default implementation of <tt>perform_get()</tt> 
does nothing, but can be overridden by subclasses.




\section variables_set How SNMP Set requests are served

Each variable provides the functions <tt>perform_testset()</tt>, 
<tt>perform_commitset()</tt>, <tt>perform_cleanupset()</tt> and 
<tt>perform_undoset()</tt>, which are called while processing an SNMP Set 
request for the variable (see also \ref the_set_steps).  Each of these functions 
takes the new value as parameter (e.g.  an qint32 value for 
\agentxcpp{IntegerVariable}). The functions should then act as described in \ref 
the_set_steps, returning success or failure. It is not required that the 
functions update the internal member, because on Set request a subagent does not 
send the new state back to the master agent.

The default implementation of the Set-supporting methods is to fail with 
\agentxcpp{AbstractVariable::noAccess}, indicating that the variable is 
read-only. It is required to reimplement the methods in a derived class to 
enable write support.

\cond INTERNAL

\subsection variables_set_internal How Set requests are handled internally

When the \agentxcpp{MasterProxy} object receives a TestSet, CommitSet, 
CleanupSet or UndoSet request, it looks up the variable corresponding to the 
given OID and calls its \agentxcpp{AbstractVariable::handle_testset()}, 
\agentxcpp{AbstractVariable::handle_commitset()}, 
\agentxcpp{AbstractVariable::handle_cleanupset()} or
\agentxcpp{AbstractVariable::handle_undoset()} method, respectively. These 
methods are implemented in the subclasses of AbstractVariable. The first one, 
<tt>handle_testset()</tt>, is the only one which receives new new value, in form 
of a pointer to \agentxcpp{AbstractVariable}, and stores it internally for later 
use. The other three methods then use the stored pointer to obtain access to the 
new value.

In particular, the <tt>handle_testset()</tt> method converts the pointer to 
\agentxcpp{AbstractVariable} into a pointer to the more concrete class (e.g.  
\agentxcpp{Gauge32Variable} and stores it. Then, it calls the 
<tt>perform_testset()</tt> method.  The <tt>handle_commitset()</tt> 
<tt>handle_cleanupset()</tt> and <tt>handle_undoset()</tt> methods only call 
<tt>perform_commitset()</tt>, <tt>perform_cleanupset()</tt> and 
<tt>perform_undoset()</tt>, respectively.

The default implementation of <tt>perform_testset()</tt> returns 
\agentxcpp{AbstractVariable::noAccess} to indicate that the variable is 
read-only. The method can be overridden by subclasses to enable write support.  
The default implementations of <tt>perform_commitset()</tt>, 
<tt>perform_cleanupset()</tt> and <tt>perform_undoset()</tt> all return false to 
indicate an error.


\section variables_serializing_parsing Serializing and Parsing Variables

The \agentxcpp{AbstractVariable} interface provides the 
\agentxcpp{AbstractVariable::serialize()} function to serialize a variable 
object.  Parsing is done using parse constructors. This is the same mechanism as 
used by the %PDU classes. See \ref pdus for a general explanation.

\endcond

*/
